package com.tom_roush.pdfbox.pdmodel.font.encoding;

import com.tom_roush.pdfbox.cos.COSBase;
import com.tom_roush.pdfbox.cos.COSName;
import lib.zj.office.fc.hssf.record.UnknownRecord;
import lib.zj.office.fc.ss.usermodel.ShapeTypes;

/* loaded from: classes2.dex */
public class SymbolEncoding extends Encoding {
    private static final int CHAR_CODE = 0;
    private static final int CHAR_NAME = 1;
    private static final Object[][] SYMBOL_ENCODING_TABLE = {new Object[]{65, "Alpha"}, new Object[]{66, "Beta"}, new Object[]{67, "Chi"}, new Object[]{68, "Delta"}, new Object[]{69, "Epsilon"}, new Object[]{72, "Eta"}, new Object[]{160, "Euro"}, new Object[]{71, "Gamma"}, new Object[]{193, "Ifraktur"}, new Object[]{73, "Iota"}, new Object[]{75, "Kappa"}, new Object[]{76, "Lambda"}, new Object[]{77, "Mu"}, new Object[]{78, "Nu"}, new Object[]{87, "Omega"}, new Object[]{79, "Omicron"}, new Object[]{70, "Phi"}, new Object[]{80, "Pi"}, new Object[]{89, "Psi"}, new Object[]{194, "Rfraktur"}, new Object[]{82, "Rho"}, new Object[]{83, "Sigma"}, new Object[]{84, "Tau"}, new Object[]{81, "Theta"}, new Object[]{85, "Upsilon"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_BLANK), "Upsilon1"}, new Object[]{88, "Xi"}, new Object[]{90, "Zeta"}, new Object[]{192, "aleph"}, new Object[]{97, "alpha"}, new Object[]{38, "ampersand"}, new Object[]{208, "angle"}, new Object[]{225, "angleleft"}, new Object[]{241, "angleright"}, new Object[]{Integer.valueOf((int) ShapeTypes.CHART_PLUS), "approxequal"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_SOUND), "arrowboth"}, new Object[]{219, "arrowdblboth"}, new Object[]{223, "arrowdbldown"}, new Object[]{220, "arrowdblleft"}, new Object[]{222, "arrowdblright"}, new Object[]{221, "arrowdblup"}, new Object[]{Integer.valueOf((int) ShapeTypes.FUNNEL), "arrowdown"}, new Object[]{190, "arrowhorizex"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_MOVIE), "arrowleft"}, new Object[]{Integer.valueOf((int) ShapeTypes.GEAR_9), "arrowright"}, new Object[]{Integer.valueOf((int) ShapeTypes.GEAR_6), "arrowup"}, new Object[]{189, "arrowvertex"}, new Object[]{42, "asteriskmath"}, new Object[]{124, "bar"}, new Object[]{98, "beta"}, new Object[]{123, "braceleft"}, new Object[]{125, "braceright"}, new Object[]{236, "bracelefttp"}, new Object[]{237, "braceleftmid"}, new Object[]{238, "braceleftbt"}, new Object[]{252, "bracerighttp"}, new Object[]{253, "bracerightmid"}, new Object[]{254, "bracerightbt"}, new Object[]{Integer.valueOf((int) UnknownRecord.PHONETICPR_00EF), "braceex"}, new Object[]{91, "bracketleft"}, new Object[]{93, "bracketright"}, new Object[]{Integer.valueOf((int) UnknownRecord.BITMAP_00E9), "bracketlefttp"}, new Object[]{234, "bracketleftex"}, new Object[]{235, "bracketleftbt"}, new Object[]{249, "bracketrighttp"}, new Object[]{250, "bracketrightex"}, new Object[]{251, "bracketrightbt"}, new Object[]{Integer.valueOf((int) ShapeTypes.SQUARE_TABS), "bullet"}, new Object[]{191, "carriagereturn"}, new Object[]{99, "chi"}, new Object[]{196, "circlemultiply"}, new Object[]{197, "circleplus"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_END), "club"}, new Object[]{58, "colon"}, new Object[]{44, "comma"}, new Object[]{64, "congruent"}, new Object[]{227, "copyrightsans"}, new Object[]{211, "copyrightserif"}, new Object[]{Integer.valueOf((int) ShapeTypes.MATH_PLUS), "degree"}, new Object[]{100, "delta"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_BEGINNING), "diamond"}, new Object[]{Integer.valueOf((int) ShapeTypes.PLAQUE_TABS), "divide"}, new Object[]{215, "dotmath"}, new Object[]{56, "eight"}, new Object[]{206, "element"}, new Object[]{188, "ellipsis"}, new Object[]{198, "emptyset"}, new Object[]{101, "epsilon"}, new Object[]{61, "equal"}, new Object[]{Integer.valueOf((int) ShapeTypes.CHART_STAR), "equivalence"}, new Object[]{104, "eta"}, new Object[]{33, "exclam"}, new Object[]{36, "existential"}, new Object[]{53, "five"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_BACK_PREVIOUS), "florin"}, new Object[]{52, "four"}, new Object[]{164, "fraction"}, new Object[]{103, "gamma"}, new Object[]{209, "gradient"}, new Object[]{62, "greater"}, new Object[]{Integer.valueOf((int) ShapeTypes.MATH_DIVIDE), "greaterequal"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_RETURN), "heart"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_FORWARD_NEXT), "infinity"}, new Object[]{242, "integral"}, new Object[]{243, "integraltp"}, new Object[]{244, "integralex"}, new Object[]{245, "integralbt"}, new Object[]{199, "intersection"}, new Object[]{105, "iota"}, new Object[]{107, "kappa"}, new Object[]{108, "lambda"}, new Object[]{60, "less"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_HELP), "lessequal"}, new Object[]{217, "logicaland"}, new Object[]{216, "logicalnot"}, new Object[]{218, "logicalor"}, new Object[]{224, "lozenge"}, new Object[]{45, "minus"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_HOME), "minute"}, new Object[]{109, "mu"}, new Object[]{Integer.valueOf((int) ShapeTypes.MATH_EQUAL), "multiply"}, new Object[]{57, "nine"}, new Object[]{207, "notelement"}, new Object[]{Integer.valueOf((int) ShapeTypes.CHART_X), "notequal"}, new Object[]{203, "notsubset"}, new Object[]{110, "nu"}, new Object[]{35, "numbersign"}, new Object[]{119, "omega"}, new Object[]{118, "omega1"}, new Object[]{111, "omicron"}, new Object[]{49, "one"}, new Object[]{40, "parenleft"}, new Object[]{41, "parenright"}, new Object[]{230, "parenlefttp"}, new Object[]{231, "parenleftex"}, new Object[]{232, "parenleftbt"}, new Object[]{246, "parenrighttp"}, new Object[]{247, "parenrightex"}, new Object[]{248, "parenrightbt"}, new Object[]{Integer.valueOf((int) ShapeTypes.CORNER_TABS), "partialdiff"}, new Object[]{37, "percent"}, new Object[]{46, "period"}, new Object[]{94, "perpendicular"}, new Object[]{102, "phi"}, new Object[]{106, "phi1"}, new Object[]{112, "pi"}, new Object[]{43, "plus"}, new Object[]{Integer.valueOf((int) ShapeTypes.MATH_MINUS), "plusminus"}, new Object[]{213, "product"}, new Object[]{204, "propersubset"}, new Object[]{201, "propersuperset"}, new Object[]{Integer.valueOf((int) ShapeTypes.MATH_NOT_EQUAL), "proportional"}, new Object[]{121, "psi"}, new Object[]{63, "question"}, new Object[]{214, "radical"}, new Object[]{96, "radicalex"}, new Object[]{205, "reflexsubset"}, new Object[]{202, "reflexsuperset"}, new Object[]{226, "registersans"}, new Object[]{210, "registerserif"}, new Object[]{114, "rho"}, new Object[]{Integer.valueOf((int) ShapeTypes.MATH_MULTIPLY), "second"}, new Object[]{59, "semicolon"}, new Object[]{55, "seven"}, new Object[]{115, "sigma"}, new Object[]{86, "sigma1"}, new Object[]{126, "similar"}, new Object[]{54, "six"}, new Object[]{47, "slash"}, new Object[]{32, "space"}, new Object[]{Integer.valueOf((int) ShapeTypes.ACTION_BUTTON_DOCUMENT), "spade"}, new Object[]{39, "suchthat"}, new Object[]{229, "summation"}, new Object[]{116, "tau"}, new Object[]{92, "therefore"}, new Object[]{113, "theta"}, new Object[]{74, "theta1"}, new Object[]{51, "three"}, new Object[]{228, "trademarksans"}, new Object[]{212, "trademarkserif"}, new Object[]{50, "two"}, new Object[]{95, "underscore"}, new Object[]{200, "union"}, new Object[]{34, "universal"}, new Object[]{117, "upsilon"}, new Object[]{195, "weierstrass"}, new Object[]{120, "xi"}, new Object[]{48, "zero"}, new Object[]{122, "zeta"}};
    public static final SymbolEncoding INSTANCE = new SymbolEncoding();

    public SymbolEncoding() {
        Object[][] objArr;
        for (Object[] objArr2 : SYMBOL_ENCODING_TABLE) {
            add(((Integer) objArr2[0]).intValue(), objArr2[1].toString());
        }
    }

    @Override // com.tom_roush.pdfbox.pdmodel.common.COSObjectable
    public COSBase getCOSObject() {
        return COSName.getPDFName("SymbolEncoding");
    }

    @Override // com.tom_roush.pdfbox.pdmodel.font.encoding.Encoding
    public String getEncodingName() {
        return "SymbolEncoding";
    }
}
